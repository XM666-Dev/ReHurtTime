package com.xm666.rehurttime.mixin;

import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
import com.llamalad7.mixinextras.sugar.Share;
import com.llamalad7.mixinextras.sugar.ref.LocalBooleanRef;
import com.xm666.rehurttime.Config;
import com.xm666.rehurttime.util.Util;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.LivingEntity;
import org.objectweb.asm.Opcodes;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

public class BypassesInvulnerabilityMixin {
    @Mixin(LivingEntity.class)
    private static class LivingEntityMixin {
        @Inject(method = "hurt", at = @At(value = "FIELD", opcode = Opcodes.GETFIELD, target = "Lnet/minecraft/world/entity/LivingEntity;lastHurt:F", ordinal = 0))
        private void injectLastHurt(DamageSource source, float amount, CallbackInfoReturnable<Boolean> cir, @Share("test") LocalBooleanRef test) {
            test.set(Util.test(Config.BYPASSES_INVULNERABILITY_PREDICATE.get(), (LivingEntity) (Object) this, source));
        }

        @WrapOperation(method = "hurt", at = @At(value = "FIELD", opcode = Opcodes.GETFIELD, target = "Lnet/minecraft/world/entity/LivingEntity;lastHurt:F"))
        private float wrapLastHurt(LivingEntity instance, Operation<Float> original, @Share("test") LocalBooleanRef test) {
            return test.get() ? 0.0F : original.call(instance);
        }
    }
}
